# -*- coding: utf-8 -*-
"""CNN_ObjectDetectionUsingLessClasses.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CfVZhCUvg1fJ5H-iySZkj6CZCBi75pWp

# **Importing Libraries**
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

"""# **Load CIFAR-10 dataset**"""

# Load CIFAR-10 dataset
(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()

"""# **Define the classes you want to use**"""

# Define the classes you want to use (e.g., airplane and automobile)
class_names = ['airplane', 'automobile']
class_indices = [0, 1]

"""# **Flatten the boolean arrays for filtering**"""

# Flatten the boolean arrays for filtering
train_filter = np.ravel(np.isin(y_train, class_indices))
test_filter = np.ravel(np.isin(y_test, class_indices))

"""# **Filter the dataset to keep only the selected classes**"""

# Filter the dataset to keep only the selected classes
X_train_filtered, y_train_filtered = X_train[train_filter], y_train[train_filter]
X_test_filtered, y_test_filtered = X_test[test_filter], y_test[test_filter]

"""# **Normalize pixel values to be in the range [0, 1]**"""

# Normalize pixel values to be in the range [0, 1]
X_train_filtered, X_test_filtered = X_train_filtered / 255.0, X_test_filtered / 255.0

"""# **CNN model**"""

# Create a binary classification model
binary_model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Use sigmoid activation for binary classification
])

# Compile the model
binary_model.compile(optimizer='adam',
                     loss='binary_crossentropy',
                     metrics=['accuracy'])

# Print a summary of the model architecture
binary_model.summary()

"""# **Train and Evaluate Model**"""

# Train the binary classification model
history = binary_model.fit(X_train_filtered, y_train_filtered, epochs=20, validation_data=(X_test_filtered, y_test_filtered))

# Evaluate the binary classification model
test_loss, test_acc = binary_model.evaluate(X_test_filtered, y_test_filtered, verbose=2)
print(f"Binary Classification Test Accuracy: {test_acc}")

"""# **Plot Graphs**"""

# Plot training history
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(loc='upper right')

plt.show()

