# -*- coding: utf-8 -*-
"""CNN_ObjectDetectionUsingAllClasses.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CfVZhCUvg1fJ5H-iySZkj6CZCBi75pWp

# **Importing Libraries**
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

"""# **Load CIFAR-10 dataset**"""

# Load CIFAR-10 dataset
(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()

"""# **Normalize pixel values to be in the range [0, 1]**"""

# Normalize pixel values to be in the range [0, 1]
X_train, X_test = X_train / 255.0, X_test / 255.0

"""# **CNN model**"""

# Create a CNN model
cnn_model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')  # Use softmax activation for multiclass classification
])

# Compile the model
cnn_model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',  # Use sparse categorical cross-entropy for multiclass classification
                  metrics=['accuracy'])

# Print a summary of the model architecture
cnn_model.summary()

"""# **Train and Evaluate Model**"""

# Train the CNN model
history = cnn_model.fit(X_train, y_train, epochs=20, validation_data=(X_test, y_test))

# Evaluate the CNN model
test_loss, test_acc = cnn_model.evaluate(X_test, y_test, verbose=2)
print(f"CNN Test Accuracy: {test_acc}")

"""# **Plot Graphs**"""

# Plot training history
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(loc='upper right')

plt.show()

