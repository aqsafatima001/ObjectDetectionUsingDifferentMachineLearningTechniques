# -*- coding: utf-8 -*-
"""LogisticRegression_ObjectDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/108Rb0AHT2IQwI0ntirrt8cgYLtYmqB-1

## **Import Libraries**
"""

import numpy as np
from tensorflow.keras import datasets
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline

"""## **LOAD CIFAR 10 DATASET**"""

# Load CIFAR-10 dataset
(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()

"""## **Flatten the images for logistic regression**

"""

# Flatten the images for logistic regression
X_train_flat = X_train.reshape((X_train.shape[0], -1))
X_test_flat = X_test.reshape((X_test.shape[0], -1))
y_train_flat = y_train.ravel()
y_test_flat = y_test.ravel()

"""## **Define a logistic regression model with a grid search for hyperparameters**"""

parameters = {
    'logisticregression__C': [0.01],
    'logisticregression__max_iter': [100]
}

"""## **Create a pipeline that includes scaling and logistic regressio**n"""

pipeline = make_pipeline(StandardScaler(), LogisticRegression())

"""## **Apply grid search with cross-validation**"""

grid_search = GridSearchCV(pipeline, parameters, n_jobs=-1, cv=3)

"""## **Train the model using grid search**"""

grid_search.fit(X_train_flat, y_train_flat)

"""## **Best parameters and accuracy**"""

best_params = grid_search.best_params_
best_score = grid_search.best_score_

print(f"Best Parameters: {best_params}")
print(f"Best Accuracy: {best_score}")